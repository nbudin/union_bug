on: push

name: Continuous integration

jobs:
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: yarn
      - run: yarn install
      - run: yarn run eslint frontend

  tsc:
    name: TypeScript check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: yarn
      - run: yarn install
      - run: yarn run tsc --noEmit

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update && sudo apt-get install -y libdav1d-dev
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@nextest
      - run: cargo nextest run --workspace --profile ci
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          check_name: "Test Report"
          report_paths: "target/nextest/ci/junit.xml"

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update && sudo apt-get install -y libdav1d-dev
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: rustup component add clippy
      - run: cargo clippy --workspace -- -D warnings

  release-build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Add aarch64-unknown-linux-gnu target to Rust
        run: rustup target add aarch64-unknown-linux-gnu
      - name: Add arm64 architecture in dpkg
        run: sudo dpkg --add-architecture arm64
      - name: Add ubuntu ports repositories for arm64
        run: |
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted" | sudo tee -a /etc/apt/sources.list
      - name: apt-get update
        run: sudo apt-get update
      - name: Install compilation dependencies
        run: sudo apt-get install -y libdav1d-dev libclang-dev build-essential pkg-config libdav1d-dev:arm64 libc6-dev:arm64
      - name: Build x86_64 release
        run: cargo build -r
      - name: Build aarch64 release
        run: cargo build -r --target=aarch64-unknown-linux-gnu

  update-release-draft:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    needs:
      - test
      - fmt
      - clippy
      - tsc
      - eslint
      - release-build
    outputs:
      name: ${{ steps.release-drafter.outputs.name }}
      html_url: ${{ steps.release-drafter.outputs.html_url }}
    steps:
      - uses: release-drafter/release-drafter@v5
        id: release-drafter
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
