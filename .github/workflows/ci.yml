on: push

name: Continuous integration

jobs:
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: yarn
      - run: yarn install
      - run: yarn run eslint frontend

  tsc:
    name: TypeScript check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: yarn
      - run: yarn install
      - run: yarn run tsc --noEmit

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update && sudo apt-get install -y libdav1d-dev
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@nextest
      - run: cargo nextest run --workspace --profile ci
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          check_name: "Test Report"
          report_paths: "target/nextest/ci/junit.xml"

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update && sudo apt-get install -y libdav1d-dev
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: rustup component add clippy
      - run: cargo clippy --workspace -- -D warnings

  build:
    name: Build app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: install node
        uses: actions/setup-node@v3
        with:
          cache: yarn
      - name: yarn install
        run: yarn install
      - name: Build webpack bundle
        run: yarn run build
      - name: Add aarch64-unknown-linux-gnu target to Rust
        run: rustup target add aarch64-unknown-linux-gnu
      - name: Add arm64 architecture in dpkg
        run: sudo dpkg --add-architecture arm64
      - name: Add ubuntu ports repositories for arm64
        run: printf 'http://ports.ubuntu.com/ubuntu-ports\tpriority:4\n' | sudo tee -a /etc/apt/apt-mirrors.txt
      - name: apt-get update
        run: sudo apt-get update
      - name: Install build dependencies
        run: sudo apt-get install -y libdav1d-dev libclang-dev build-essential pkg-config gcc-12-aarch64-linux-gnu libdav1d-dev:arm64 libc6-dev:arm64
      - name: Write cargo configuration
        run: |
          mkdir .cargo
          echo "[target.aarch64-unknown-linux-gnu]" >> .cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc-12\"" >> .cargo/config.toml
      - name: Build x86_64 release
        run: cargo build -r
      - name: Build aarch64 release
        run: PKG_CONFIG_SYSROOT_DIR=/usr/lib/arm64-linux-gnu cargo build -r --target=aarch64-unknown-linux-gnu
      - name: Move binaries to build directory
        run: |
          mkdir build
          mv target/release/union_bug build/union_bug-amd64-unknown-linux-gnu
          mv target/release/aarch64-unknown-linux-gnu/release/union_bug build/union_bug-arm64-unknown-linux-gnu
      - name: Store built binaries
        uses: actions/upload-artifact@v3
        with:
          name: union_bug-server
          path: build

  update-release-draft:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    needs:
      - test
      - fmt
      - clippy
      - tsc
      - eslint
      - build
    outputs:
      name: ${{ steps.release-drafter.outputs.name }}
      html_url: ${{ steps.release-drafter.outputs.html_url }}
    steps:
      - uses: release-drafter/release-drafter@v5
        id: release-drafter
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
